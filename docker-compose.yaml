name: ${COMPOSE_PROJECT_NAME:-crypto-de}

networks:
  default:
    name: ${NETWORK_NAME:-crypto-net}

services:
  # ---------------------------
  # KAFKA (KRaft mode) + SCHEMA REGISTRY + UI
  # ---------------------------
  kafka:
    image: bitnami/kafka:3.7
    container_name: kafka
    ports:
      - "${KAFKA_PORT_HOST:-19092}:19092"
    environment:
      - KAFKA_ENABLE_KRAFT=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:29093

      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,PLAINTEXT_HOST://:19092,CONTROLLER://:29093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:${KAFKA_PORT_HOST:-19092}
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER

      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_HEAP_OPTS=-Xms256m -Xmx512m
      - ALLOW_PLAINTEXT_LISTENER=yes
      - TZ=${TZ:-UTC}
    volumes:
      - kafka-data:/bitnami/kafka
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:7.6.1
    container_name: schema-registry
    depends_on:
      - kafka
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:${SCHEMA_REGISTRY_PORT:-8081}
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      TZ: ${TZ:-UTC}
    ports:
      - "${SCHEMA_REGISTRY_PORT:-8081}:8081"
    restart: unless-stopped

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "${KAFKA_UI_PORT:-8082}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081
      KAFKA_CLUSTERS_0_READONLY: "true"
    restart: unless-stopped

  # ---------------------------
  # DWH: POSTGRES (v0)
  # ---------------------------
  postgres_dwh:
    image: postgres:16
    container_name: postgres_dwh
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-crypto}
      POSTGRES_USER: ${POSTGRES_USER:-crypto}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      TZ: ${TZ:-UTC}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-dwh-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto} -d ${POSTGRES_DB:-crypto}" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  # ---------------------------
  # OBJECT STORAGE: MINIO
  # ---------------------------
  minio:
    image: minio/minio
    container_name: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}"
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    restart: unless-stopped

  # ---------------------------
  # AIRFLOW (LocalExecutor)
  # ---------------------------
  postgres_airflow:
    image: postgres:16
    container_name: postgres_airflow
    environment:
      POSTGRES_DB: airflow
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      TZ: ${TZ:-UTC}
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U airflow -d airflow" ]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  airflow-init:
    image: apache/airflow:2.10.5
    container_name: airflow_init
    depends_on:
      postgres_airflow:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-changemefernetkey}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
      _AIRFLOW_DB_UPGRADE: "true"
      _AIRFLOW_WWW_USER_CREATE: "true"
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      TZ: ${TZ:-UTC}
    command: bash -c "airflow db upgrade && airflow users create --role Admin --username $$ _AIRFLOW_WWW_USER_USERNAME --password $$ _AIRFLOW_WWW_USER_PASSWORD --firstname Admin --lastname User --email admin@example.com || true"
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    restart: "no"

  airflow-webserver:
    image: apache/airflow:2.10.5
    container_name: airflow_web
    depends_on:
      postgres_airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-changemefernetkey}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
      TZ: ${TZ:-UTC}
    ports:
      - "${AIRFLOW_PORT:-8080}:8080"
    command: webserver
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    restart: unless-stopped

  airflow-scheduler:
    image: apache/airflow:2.10.5
    container_name: airflow_scheduler
    depends_on:
      postgres_airflow:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres_airflow:5432/airflow
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-changemefernetkey}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES:-False}
      TZ: ${TZ:-UTC}
    command: scheduler
    volumes:
      - ./dags:/opt/airflow/dags
      - airflow-logs:/opt/airflow/logs
      - airflow-plugins:/opt/airflow/plugins
    restart: unless-stopped

# ---------------------------
# Named volumes
# ---------------------------
volumes:
  kafka-data:
  postgres-dwh-data:
  minio-data:
  postgres-airflow-data:
  airflow-logs:
  airflow-plugins:
